# File: date_input_ui.py
import tkinter as tk
from tkinter import messagebox
from datetime import datetime

def validate_date_format(date_str):
    """Validate the date format (YYYY-MM-DD)."""
    try:
        datetime.strptime(date_str, "%Y-%m-%d")
        return True
    except ValueError:
        return False

def on_run():
    """Handle the Run button click."""
    start_date = start_date_entry.get()
    end_date = end_date_entry.get()
    
    # Validate input dates
    if not validate_date_format(start_date):
        messagebox.showerror("Invalid Input", "Start date is invalid. Use format YYYY-MM-DD.")
        print("Error: Invalid start date format")
        return
    
    if not validate_date_format(end_date):
        messagebox.showerror("Invalid Input", "End date is invalid. Use format YYYY-MM-DD.")
        print("Error: Invalid end date format")
        return

    start_dt = datetime.strptime(start_date, "%Y-%m-%d")
    end_dt = datetime.strptime(end_date, "%Y-%m-%d")

    if start_dt > end_dt:
        messagebox.showerror("Invalid Input", "Start date must be earlier than end date.")
        print("Error: Start date is after end date")
        return

    # If validation passes, simulate calling a model
    print(f"Running the model with start date: {start_date} and end date: {end_date}")
    print("Model execution completed!")

# Create main application window
root = tk.Tk()
root.title("Date Input UI")

# Labels and entry fields
tk.Label(root, text="Start Date (YYYY-MM-DD):").grid(row=0, column=0, padx=10, pady=5, sticky="e")
start_date_entry = tk.Entry(root, width=20)
start_date_entry.grid(row=0, column=1, padx=10, pady=5)

tk.Label(root, text="End Date (YYYY-MM-DD):").grid(row=1, column=0, padx=10, pady=5, sticky="e")
end_date_entry = tk.Entry(root, width=20)
end_date_entry.grid(row=1, column=1, padx=10, pady=5)

# Run button
run_button = tk.Button(root, text="Run", command=on_run)
run_button.grid(row=2, column=0, columnspan=2, pady=10)

# Start the application
root.mainloop()