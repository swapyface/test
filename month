import pickle
import os
import sqlite3
from datetime import datetime
import hashlib
from main import my_list, other_object

# Database file
DB_FILE = "hash_store.db"

# Function to compute hash of an object
def compute_hash(obj):
    return hashlib.md5(str(obj).encode()).hexdigest()

# Function to create or connect to the database
def setup_database():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS hash_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            hash TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    return conn

# Function to get the latest hash from the database
def get_latest_hash(conn):
    cursor = conn.cursor()
    cursor.execute("SELECT hash FROM hash_data ORDER BY created_at DESC LIMIT 1")
    result = cursor.fetchone()
    return result[0] if result else None

# Function to store a new hash in the database
def store_hash(conn, hash_value):
    cursor = conn.cursor()
    cursor.execute("INSERT INTO hash_data (hash) VALUES (?)", (hash_value,))
    conn.commit()

# Function to create a new pickle file
def create_pickle_file(objects):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"data_{timestamp}.pkl"
    with open(filename, "wb") as f:
        pickle.dump(objects, f)
    print(f"New pickle file created: {filename}")

# Main process
def main():
    conn = setup_database()

    # Get the list and objects from main.py
    objects = {"my_list": my_list, "other_object": other_object}

    # Compute the current hash
    current_hash = compute_hash(objects)

    # Get the latest stored hash from the database
    stored_hash = get_latest_hash(conn)

    if not stored_hash:
        print("No hash found in the database. First-time setup.")
        # Store the new hash in the database
        store_hash(conn, current_hash)

        # Create a pickle file
        create_pickle_file(objects)
    elif current_hash != stored_hash:
        print("Hashes do not match. Updating the hash and creating a new pickle file...")
        # Store the new hash in the database
        store_hash(conn, current_hash)

        # Create a new pickle file
        create_pickle_file(objects)
    else:
        print("Hashes match. No new pickle file created.")

    conn.close()

if __name__ == "__main__":
    main()
