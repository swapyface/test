def extract_tasks_with_deadlines(text):
    """
    Extracts actionable tasks and their associated deadlines from text.
    Uses rules to filter for active, future-facing commands/requests.
    """
    # Using a global nlp object is more efficient if calling this function in a loop
    doc = nlp(text)
    tasks = []

    for sent in doc.sents:
        # --- Task Identification Logic ---
        root_verb = sent.root
        if root_verb.pos_ != 'VERB' or root_verb.tag_ == 'VBD':
            continue

        is_passive = any(token.dep_ == 'auxpass' for token in root_verb.children)
        if is_passive:
            continue

        has_modal = any(token.tag_ == 'MD' for token in root_verb.children)
        # Check for imperative by seeing if there's no subject
        is_imperative = not any(token.dep_ in ('nsubj', 'nsubjpass') for token in root_verb.children)

        # --- Deadline Extraction Logic ---
        # A task is likely if it's a command (imperative) or has a modal verb ("should", "will", etc.)
        if has_modal or is_imperative:
            # A simple fix to avoid including the final punctuation in the task phrase
            task_phrase = " ".join([token.text for token in root_verb.subtree if not token.is_punct])

            # Find DATE or TIME entities within this same sentence
            deadlines = [ent.text for ent in sent.ents if ent.label_ in ["DATE", "TIME"]]

            # Create a dictionary for the found task
            task_info = {
                "task": task_phrase,
                "deadline": ", ".join(deadlines) if deadlines else None
            }
            tasks.append(task_info)

    return tasks
