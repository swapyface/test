import spacy

# A set of verb lemmas that are typically not actionable tasks, even if imperative.
NON_TASK_VERBS = {"thank", "congratulate", "welcome", "apologize"}

def is_task_for_reader(verb_token):
    """
    Analyzes the subject of a verb to determine if it's an actionable
    task for the person reading the email.
    """
    subject = None
    for child in verb_token.children:
        if child.dep_ in ('nsubj', 'nsubjpass'):
            subject = child
            break

    # Case 1: No subject found. This is an imperative command (e.g., "Prepare the slides.")
    # This is a task for the reader.
    if subject is None:
        return True

    # Case 2: The subject is "you". (e.g., "Can you prepare the slides?")
    # This is a task for the reader.
    if subject.text.lower() == 'you':
        return True

    # Case 3: The subject is a proper noun ("Andrew", "Sarah") or another pronoun ("I", "we", "he").
    # This is informational, a task for someone else.
    if subject.pos_ == 'PROPN' or (subject.pos_ == 'PRON' and subject.text.lower() != 'you'):
        return False
        
    # Default to False if the pattern is not explicitly a task for the reader.
    return False


def extract_tasks_with_deadlines(text):
    """
    Extracts actionable tasks for the reader and their associated deadlines.
    """
    doc = nlp(text)
    tasks = []

    for sent in doc.sents:
        root_verb = sent.root
        
        # *** NEW FILTER: Ignore common non-task verbs ***
        if root_verb.lemma_ in NON_TASK_VERBS:
            continue

        # Initial filter: must be a verb, not past tense, not passive.
        if root_verb.pos_ != 'VERB' or root_verb.tag_ == 'VBD':
            continue
        if any(token.dep_ == 'auxpass' for token in root_verb.children):
            continue

        # *** ACTOR-CHECKING LOGIC ***
        if is_task_for_reader(root_verb):
            task_phrase = " ".join([token.text for token in root_verb.subtree if not token.is_punct])
            deadlines = [ent.text for ent in sent.ents if ent.label_ in ["DATE", "TIME"]]
            
            task_info = {
                "task": task_phrase,
                "deadline": ", ".join(deadlines) if deadlines else None
            }
            tasks.append(task_info)
            
    return tasks

# --- Test Cases ---

# Initialize the spaCy model
print("Loading spaCy model...")
nlp = spacy.load("en_core_web_sm")
print("Model loaded.")

# Test cases
informational_sentence = "Andrew will prepare the slides and share it."
actionable_sentence = "Please prepare the slides and share them by tomorrow."
non_task_pleasantry = "thank you for your responce" # The user's failing case

# Run the tests
print("\n--- Testing Informational Sentence ---")
print(f"SENTENCE: \"{informational_sentence}\"")
result1 = extract_tasks_with_deadlines(informational_sentence)
print(f"RESULT: {result1}")
if not result1:
    print("STATUS: CORRECTLY IDENTIFIED AS NON-TASK")
else:
    print("STATUS: FAILED - Incorrectly identified as a task")


print("\n--- Testing Actionable Sentence ---")
print(f"SENTENCE: \"{actionable_sentence}\"")
result2 = extract_tasks_with_deadlines(actionable_sentence)
print(f"RESULT: {result2}")
if result2:
    print("STATUS: CORRECTLY IDENTIFIED AS TASK")
else:
    print("STATUS: FAILED - Missed a real task")

print("\n--- Testing Non-Task Pleasantry ---")
print(f"SENTENCE: \"{non_task_pleasantry}\"")
result3 = extract_tasks_with_deadlines(non_task_pleasantry)
print(f"RESULT: {result3}")
if not result3:
    print("STATUS: CORRECTLY IDENTIFIED AS NON-TASK")
else:
    print("STATUS: FAILED - Incorrectly identified as a task")
