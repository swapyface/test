import pandas as pd

# Assuming you have already loaded your two DataFrames as df_uat and df_prod
# For demonstration purposes, let's create sample DataFrames:
data_uat = {'item_id': [1, 1, 2, 3],
            'category': ['A', 'A', 'B', 'C'],
            'product_name': ['Product X', 'Product Y', 'Product Z', 'Product W'],
            'price': [10.0, 20.5, 15.0, 25.0],
            'other_col_uat': [100, 200, 300, 400]}
df_uat = pd.DataFrame(data_uat)

data_prod = {'item_id': [1, 2, 2, 3],
             'category': ['A', 'B', 'B', 'C'],
             'product_name': ['Product X', 'Product Z', 'Product ZZ', 'Product W'],
             'price': [10.0, 15.0, 16.0, 25.0],
             'other_col_prod': [500, 600, 700, 800]}
df_prod = pd.DataFrame(data_prod)

key_columns = ["item_id", "category", "product_name"]
price_column = "price"

# Merge the two DataFrames based on the key columns
merged_df = pd.merge(df_uat, df_prod, on=key_columns, suffixes=('_uat', '_prod'), how='outer', indicator=True)

mismatches_found = False

# Identify rows present in both DataFrames
both_files_df = merged_df[merged_df['_merge'] == 'both']

# Compare the price column for matching rows
for index, row in both_files_df.iterrows():
    key_values = {key: row[key] for key in key_columns}
    price_uat = row[f"{price_column}_uat"]
    price_prod = row[f"{price_column}_prod"]

    if pd.isna(price_uat) and not pd.isna(price_prod):
        print(f"Mismatch found for keys: {key_values} - {price_column}: UAT=None, PROD={price_prod}")
        mismatches_found = True
    elif not pd.isna(price_uat) and pd.isna(price_prod):
        print(f"Mismatch found for keys: {key_values} - {price_column}: UAT={price_uat}, PROD=None")
        mismatches_found = True
    elif not pd.isna(price_uat) and not pd.isna(price_prod) and price_uat != price_prod:
        print(f"Mismatch found for keys: {key_values} - {price_column}: UAT={price_uat}, PROD={price_prod}")
        mismatches_found = True

# Identify rows present only in one DataFrame
only_uat = merged_df[merged_df['_merge'] == 'left_only']
if not only_uat.empty:
    print("\nRows present only in UAT:")
    for index, row in only_uat.iterrows():
        key_values = {col: row[col] for col in key_columns}
        print(f"  - Keys: {key_values}")

only_prod = merged_df[merged_df['_merge'] == 'right_only']
if not only_prod.empty:
    print("\nRows present only in PROD:")
    for index, row in only_prod.iterrows():
        key_values = {col: row[col] for col in key_columns}
        print(f"  - Keys: {key_values}")

if not mismatches_found and only_uat.empty and only_prod.empty:
    print("\nNo mismatches found in the price column based on the provided keys.")
elif not mismatches_found and (not only_uat.empty or not only_prod.empty):
    print("\nNo price mismatches found for matching keys.")
