import re
from datetime import date, timedelta
from dateutil.relativedelta import relativedelta, SU, MO, TU, WE, TH, FR, SA

def extract_due_date(text: str) -> date | None:
    """
    Extracts a specific due date from a given text based on key phrases.

    Args:
        text: The input string (e.g., an email body).

    Returns:
        A datetime.date object if a recognized phrase is found, otherwise None.
    """
    today = date.today()
    text_lower = text.lower()

    # --- Define patterns and their corresponding date calculation logic ---
    # The order matters: more specific patterns should come before general ones.

    # Pattern for "tomorrow"
    if re.search(r'tomorrow', text_lower):
        return today + timedelta(days=1)

    # Pattern for "[N]th week of the month" (e.g., "2nd week of the month", "3rd week")
    # This regex captures the number (1st, 2nd, 3rd, 4th, 5th) and ensures it's followed by "week" and "month" (optional)
    nth_week_match = re.search(r'(\d+)(st|nd|rd|th)\s+week(?:\s+of the month)?', text_lower)
    if nth_week_match:
        ordinal_num_str = nth_week_match.group(1)
        try:
            week_number = int(ordinal_num_str)
            if 1 <= week_number <= 5: # Limit to realistic week numbers (1st to 5th)
                # Calculate the first day of the current month
                first_day_of_month = date(today.year, today.month, 1)
                
                # Calculate the start of the Nth week.
                # Assuming weeks start on Monday (ISO standard), get the first Monday of the month.
                # If the 1st of the month is a Monday, then that's the start of week 1.
                # Otherwise, find the first Monday after the 1st.
                
                # Find the first Monday of the current month
                first_monday = first_day_of_month + relativedelta(weekday=MO(1))

                # Calculate the start of the target week.
                # Each week starts 7 days after the previous one.
                # So, for the 2nd week, it's first_monday + 7 days.
                # For the Nth week, it's first_monday + (N-1) * 7 days.
                calculated_date = first_monday + timedelta(weeks=(week_number - 1))
                
                # Add a sanity check: Ensure the calculated date is still within the current month.
                # If the calculated date spills into the next month, it means the Nth week
                # (as defined by "first Monday of the month + (N-1) weeks") doesn't fully exist
                # in the current month in a meaningful way for this interpretation.
                # However, for phrases like "2nd week of the month", the expectation is usually
                # to get a date *within* that week in the current month.
                # For simplicity, we'll return the calculated_date, as it aligns with the start
                # of the Nth ISO week *relative to the beginning of the month*.
                # More robust parsing might involve checking which day of the week the user implies.
                # For now, returning the Monday of that week is a reasonable default.

                # A common interpretation for "2nd week of the month" often means the Monday of that week.
                return calculated_date
            
        except ValueError:
            pass # Not a valid number, continue to other patterns

    # Pattern for "next [weekday]" (e.g., "next Sunday", "next Monday")
    next_weekday_match = re.search(r'next\s+(sunday|monday|tuesday|wednesday|thursday|friday|saturday)', text_lower)
    if next_weekday_match:
        weekday_str = next_weekday_match.group(1)
        weekday_map = {
            "sunday": SU, "monday": MO, "tuesday": TU, "wednesday": WE,
            "thursday": TH, "friday": FR, "saturday": SA
        }
        target_weekday_obj = weekday_map[weekday_str]
        
        calculated_date = today + relativedelta(weekday=target_weekday_obj(+1))
        
        if calculated_date == today:
            calculated_date += timedelta(days=7)
        return calculated_date

    # Pattern for "Next Month end" or "end of next month"
    if re.search(r'(next month end|end of next month)', text_lower):
        end_of_next_month = date(today.year, today.month, 1) + relativedelta(months=2) - timedelta(days=1)
        return end_of_next_month

    # Pattern for "Month end" or "end of the month" (referring to the current month)
    elif re.search(r'(month end|end of the month)', text_lower):
        end_of_current_month = date(today.year, today.month, 1) + relativedelta(months=1) - timedelta(days=1)
        return end_of_current_month
        
    # Pattern for "end of the day" (implies today)
    elif re.search(r'end of the day', text_lower):
        return today
        
    # If no recognized date phrases are found, return None
    return None

# --- Example Usage ---
if __name__ == "__main__":
    print(f"Assuming today is: {date.today().strftime('%Y-%m-%d, %A')}\n")

    email_samples = [
        "Please send me the quarterly report by next Sunday.",
        "Can you get the slides ready for next Monday?",
        "Hi, I need the final presentation before the Next Month end.",
        "All team members must submit their logs by Month end.",
        "Could you forward me the details by the 2nd week of the month?", # New test case
        "The deadline is the end of next month.",
        "Submit your timesheet by end of the month, please.",
        "Let's meet next Friday.",
        "This is just a regular email with no specific due date.",
        "We need this by tomorrow.",
        "Could you provide the data by the 1st week?", # Test without "of the month"
        "Finish this by the 3rd week of the month.",
        "Project due 5th week of the month.", # Test for 5th week
    ]

    for i, email_body in enumerate(email_samples):
        extracted_date = extract_due_date(email_body)
        print(f"📧 Email {i+1}: \"{email_body}\"")
        if extracted_date:
            formatted_date = extracted_date.strftime("%Y-%m-%d, %A")
            print(f"   -> 🎯 Extracted Due Date: {formatted_date}\n")
        else:
            print("   -> ❌ No specific due date phrase found by current rules.\n")

    print("--- Specific Test Cases (run these on different days or mock today's date) ---")
    test_case_1 = "send me report by next Sunday"
    print(f"Input: \"{test_case_1}\" -> Output: {extract_due_date(test_case_1)}")

    test_case_2 = "send me report by Next Month end"
    print(f"Input: \"{test_case_2}\" -> Output: {extract_due_date(test_case_2)}")

    test_case_3 = "send me report by Month end"
    print(f"Input: \"{test_case_3}\" -> Output: {extract_due_date(test_case_3)}")
    
    test_case_4 = "send me report by end of the day"
    print(f"Input: \"{test_case_4}\" -> Output: {extract_due_date(test_case_4)}")

    test_case_5 = "send me report by end of next month"
    print(f"Input: \"{test_case_5}\" -> Output: {extract_due_date(test_case_5)}")

    test_case_6 = "I need this by tomorrow morning"
    print(f"Input: \"{test_case_6}\" -> Output: {extract_due_date(test_case_6)}")

    test_case_7 = "Please provide updates by the 2nd week of the month."
    print(f"Input: \"{test_case_7}\" -> Output: {extract_due_date(test_case_7)}")

    test_case_8 = "Final review by 4th week."
    print(f"Input: \"{test_case_8}\" -> Output: {extract_due_date(test_case_8)}")
