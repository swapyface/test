import pandas as pd
from sklearn.cluster import DBSCAN
import numpy as np

# Assuming you have the merged_df from the previous code

# Apply DBSCAN only where a price mismatch is found and neither price is 0
price_mismatch_df = merged_df[
    (merged_df['comment'] == 'Price mismatch') &
    (merged_df['price_uat'] != 0) &
    (merged_df['price_prod'] != 0) &
    (~merged_df['price_difference'].isna())
].copy()

if not price_mismatch_df.empty:
    # Reshape the price difference column for DBSCAN
    price_diff_array = price_mismatch_df['price_difference'].values.reshape(-1, 1)

    # Apply DBSCAN
    dbscan = DBSCAN(eps=0.5, min_samples=2)  # Adjust eps and min_samples as needed
    clusters = dbscan.fit_predict(price_diff_array)

    # Add outlier labels to the price_mismatch_df
    price_mismatch_df['outlier_dbscan'] = np.where(clusters == -1, 'Outlier', 'Not Outlier')

    # Merge the outlier labels back into the original merged_df
    merged_df = pd.merge(merged_df,
                             price_mismatch_df[['item_id', 'category', 'product_name', 'outlier_dbscan']],
                             on=key_columns,
                             how='left')

    # Fill NaN in 'outlier_dbscan' with 'Not Applicable' for rows without price mismatch
    merged_df['outlier_dbscan'] = merged_df['outlier_dbscan'].fillna('Not Applicable')
else:
    merged_df['outlier_dbscan'] = 'Not Applicable'
    print("No price mismatches found (excluding cases with 0 price) to apply DBSCAN.")

# Label as 'Excluded' if price is 0 in either UAT or PROD where a mismatch exists
zero_price_mismatch = merged_df[
    (merged_df['comment'].str.contains('Price mismatch')) &
    ((merged_df['price_uat'] == 0) | (merged_df['price_prod'] == 0))
].index
merged_df.loc[zero_price_mismatch, 'outlier_dbscan'] = 'Excluded'

# Print the merged DataFrame with the outlier detection column
print(merged_df[['item_id', 'category', 'product_name', 'price_uat', 'price_prod', 'price_difference', 'comment', 'outlier_dbscan']])

# If you want to save this to a new Excel file:
# merged_df.to_excel("comparison_with_outliers.xlsx", index=False)
