import pandas as pd
import numpy as np
from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder
from sklearn.cluster import DBSCAN

# Sample Data
data = pd.DataFrame({
    'Company': ['Apple', 'Apple', 'Apple', 'Google', 'Google', 'Google', 'Tesla', 'Tesla'],
    'Rating1': ['A', 'B', 'A', 'A', 'C', 'B', 'B', 'C'],
    'Rating2': ['C', 'B', 'B', 'B', 'A', 'C', 'A', 'B'],
    'Industry': ['Tech', 'Tech', 'Finance', 'Tech', 'Health', 'Finance', 'Auto', 'Auto'],
    'Subordination': ['Senior', 'Junior', 'Senior', 'Senior', 'Junior', 'Senior', 'Senior', 'Junior']
})

# Define ordinal categories for ratings
rating_order = [['A', 'B', 'C']]  # A (best) -> 0, B -> 1, C (worst) -> 2
ordinal_encoder = OrdinalEncoder(categories=rating_order + rating_order)

# Apply ordinal encoding to Rating1 & Rating2
data[['Rating1', 'Rating2']] = ordinal_encoder.fit_transform(data[['Rating1', 'Rating2']])

# Apply one-hot encoding to Industry
onehot_encoder = OneHotEncoder(sparse=False, drop='first')  # Drop first to avoid multicollinearity
industry_encoded = onehot_encoder.fit_transform(data[['Industry']])
industry_encoded_df = pd.DataFrame(industry_encoded, columns=onehot_encoder.get_feature_names_out())

# Combine processed features
encoded_df = pd.concat([data[['Company', 'Rating1', 'Rating2']], industry_encoded_df], axis=1)

# Detect Outliers within each Company
outlier_results = []
for company, group in encoded_df.groupby('Company'):
    company_data = group.drop(columns=['Company'])  # Remove Company column before training
    
    # Train DBSCAN for each company
    dbscan = DBSCAN(eps=0.5, min_samples=2)  # Tune parameters as needed
    labels = dbscan.fit_predict(company_data)

    # Mark Outliers (-1 in DBSCAN means outlier)
    group['Outlier'] = (labels == -1)
    
    # Store results
    outlier_results.append(group)

# Combine results
final_results = pd.concat(outlier_results).reset_index(drop=True)

# Merge back with original data for readability
data_with_outliers = data.merge(final_results[['Outlier']], left_index=True, right_index=True)
print(data_with_outliers)