import pandas as pd
from sklearn.cluster import DBSCAN
import numpy as np

# Assuming you have your two DataFrames loaded as df_uat and df_prod
# and you have defined key_columns and comparison_variables

# Example of multiple comparison variables
comparison_variables = ["price", "quantity", "discount_percent"]

# Merge the DataFrames
merged_df = pd.merge(df_uat, df_prod, on=key_columns, suffixes=('_uat', '_prod'), how='outer')

# Initialize comment column
merged_df['comment'] = ''

for var in comparison_variables:
    uat_col = f"{var}_uat"
    prod_col = f"{var}_prod"
    pct_diff_col = f"{var}_percentage_difference"
    outlier_col = f"{var}_outlier_dbscan"

    # Create percentage difference column
    merged_df[pct_diff_col] = None

    # Identify rows present in both
    both_files_mask = merged_df['_merge'] == 'both'

    # Calculate percentage difference where both values are non-zero
    non_zero_mask = both_files_mask & (merged_df[uat_col] != 0) & (merged_df[prod_col] != 0)
    merged_df.loc[non_zero_mask & (merged_df[uat_col] != merged_df[prod_col]), pct_diff_col] = (
        abs(merged_df[uat_col] - merged_df[prod_col]) / ((abs(merged_df[uat_col]) + abs(merged_df[prod_col])) / 2)
    ) * 100

    # Add comments for mismatches
    merged_df.loc[both_files_mask & (merged_df[uat_col] != merged_df[prod_col]), 'comment'] += f'{var} mismatch, '
    merged_df.loc[both_files_mask & pd.isna(merged_df[uat_col]) & ~pd.isna(merged_df[prod_col]), 'comment'] += f'{var} missing in UAT, '
    merged_df.loc[both_files_mask & ~pd.isna(merged_df[uat_col]) & pd.isna(merged_df[prod_col]), 'comment'] += f'{var} missing in PROD, '

    # Apply DBSCAN if there are percentage differences
    pct_diff_for_dbscan = merged_df[both_files_mask & ~merged_df[pct_diff_col].isna()][pct_diff_col].values.reshape(-1, 1)

    if pct_diff_for_dbscan.shape[0] >= 2:
        dbscan = DBSCAN(eps=0.5, min_samples=2)  # Adjust eps and min_samples as needed for percentage differences
        clusters = dbscan.fit_predict(pct_diff_for_dbscan)

        # Create a temporary DataFrame to align DBSCAN results
        temp_dbscan_df = merged_df[both_files_mask & ~merged_df[pct_diff_col].isna()].copy()
        temp_dbscan_df[outlier_col] = np.where(clusters == -1, 'Outlier', 'Not Outlier')

        # Merge outlier labels back into the main DataFrame
        merged_df = pd.merge(merged_df,
                                 temp_dbscan_df[key_columns + [outlier_col]],
                                 on=key_columns,
                                 how='left')
        merged_df[outlier_col] = merged_df[outlier_col].fillna('Not Applicable')
    else:
        merged_df[outlier_col] = 'Not Applicable'
        print(f"Not enough percentage differences found for {var} to apply DBSCAN.")

    # For rows with mismatch but zero in either UAT or PROD, mark as excluded
    zero_mismatch_mask = merged_df[
        (merged_df['comment'].str.contains(f'{var} mismatch')) &
        ((merged_df[uat_col] == 0) | (merged_df[prod_col] == 0))
    ].index
    merged_df.loc[zero_mismatch_mask, outlier_col] = 'Excluded'

# Identify rows missing in UAT/PROD and add to comment
missing_in_uat_mask = merged_df['_merge'] == 'right_only'
merged_df.loc[missing_in_uat_mask, 'comment'] += 'Missing row in UAT'

missing_in_prod_mask = merged_df['_merge'] == 'left_only'
merged_df.loc[missing_in_prod_mask, 'comment'] += 'Missing row in PROD'

# Clean up the comment column (remove trailing ', ')
merged_df['comment'] = merged_df['comment'].str.rstrip(', ')

# Print the merged DataFrame with the comparison results
output_columns = key_columns + [f'{var}_uat' for var in comparison_variables] + [f'{var}_prod' for var in comparison_variables] + [f'{var}_percentage_difference' for var in comparison_variables] + ['comment'] + [f'{var}_outlier_dbscan' for var in comparison_variables]
print(merged_df[output_columns])

# If you want to save this to a new Excel file:
# merged_df.to_excel("comparison_with_pct_outliers.xlsx", index=False)
