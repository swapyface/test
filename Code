from datetime import datetime
from dateutil.parser import parse
from dateutil.relativedelta import relativedelta
import re # For regular expressions to help find date-like patterns

def extract_dates_from_email(email_body):
    """
    Extracts dates from an email body, handling various natural language formats.
    Attempts to be more robust by looking for common date patterns.

    Args:
        email_body (str): The text content of the email.

    Returns:
        list: A list of datetime objects found in the email body.
              Returns an empty list if no dates are found or can be parsed.
    """
    extracted_dates = []
    seen_dates_str = set()
    current_time_for_default = datetime.now() # Use this as the base for relative dates

    # Define a list of common date-related patterns to search for
    # These patterns help guide dateutil by giving it smaller, more relevant chunks.
    # This is not exhaustive but covers common cases.
    date_patterns = [
        r'\b(?:next|last|this)\s+(?:(?:Mon|Tues|Wednes|Thurs|Fri|Satur|Sun)day|week|month|year)\b',
        r'\bend of (?:next|this|the) month\b',
        r'\bbeginning of (?:next|this|the) month\b',
        r'\b(?:tomorrow|yesterday|today)\b',
        r'\b\d{1,2}(?:st|nd|rd|th)?\s+(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{4}\b', # e.g., 25th Dec 2024
        r'\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{1,2}(?:st|nd|rd|th)?(?:,\s*\d{4})?\b', # e.g., Dec 25, 2024 or June 20
        r'\b\d{4}[-/]\d{1,2}[-/]\d{1,2}\b', # YYYY-MM-DD or YYYY/MM/DD
        r'\b\d{1,2}[-/]\d{1,2}[-/]\d{2,4}\b', # MM-DD-YY or DD-MM-YYYY
        r'\b\d{1,2}(?:st|nd|rd|th)?\s+week of the month\b', # e.g., 2nd week of the month
        r'\b(?:Mon|Tues|Wednes|Thurs|Fri|Satur|Sun)day\b' # just a day of the week
    ]

    # Combine all found patterns and the full email body as potential strings to parse
    potential_date_strings = []
    potential_date_strings.append(email_body) # Always try to parse the whole body
    for pattern in date_patterns:
        matches = re.findall(pattern, email_body, re.IGNORECASE)
        potential_date_strings.extend(matches)

    # Use a set to avoid processing duplicate strings
    for s in set(potential_date_strings):
        s = s.strip()
        if not s:
            continue

        try:
            # Try to parse the string.
            # default=current_time_for_default ensures relative dates are based on "now".
            parsed_date = parse(s, fuzzy=True, default=current_time_for_default)

            # --- Filtering Logic ---
            # 1. Avoid parsing just numbers or short non-date words as dates
            # If the string is too short or doesn't contain common date keywords
            # and the parsed date is identical to the default time (meaning no change occurred),
            # it's likely a false positive.
            lower_s = s.lower()
            is_likely_date_term = any(term in lower_s for term in ["next", "last", "this", "end", "beginning", "week", "month", "year", "day", "mon", "tue", "wed", "thu", "fri", "sat", "sun", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "tomorrow", "yesterday", "today", "pm", "am", "o'clock", "deadline"])

            # Heuristic: If it parsed to the default datetime object (i.e., nothing specific found)
            # AND it doesn't contain common date terms, it's probably not a real date.
            # Also, check if the string contains digits if it's not a direct keyword like 'tomorrow'.
            if (parsed_date == current_time_for_default and not is_likely_date_term) or \
               (not re.search(r'\d', s) and not is_likely_date_term):
                continue # Skip if it didn't really parse a date or it's a false positive

            # Avoid adding duplicate dates (ignoring time components for practical purposes if not specified)
            # You might adjust this if time precision is critical for duplicates.
            date_only_str = parsed_date.strftime("%Y-%m-%d")
            if date_only_str not in seen_dates_str:
                extracted_dates.append(parsed_date)
                seen_dates_str.add(date_only_str)

        except ValueError:
            pass # Not a parsable date string
        except OverflowError:
            pass # Occurs with very large numbers
        except Exception as e:
            # print(f"General error parsing '{s}': {e}") # Debugging
            pass

    # Sort the dates for consistent output
    return sorted(extracted_dates)
