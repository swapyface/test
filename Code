import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_absolute_percentage_error

# Sample dataset (replace with your actual data)
# Load your data
# df = pd.read_csv('your_data.csv')
df = pd.DataFrame({
    'rating': ['A', 'BBB', 'AA', 'A', 'BB', 'AAA', 'B'],
    'industry_level': ['financial', 'industrial', 'financial', 'sovereign', 'industrial', 'sovereign', 'financial'],
    'subordination': ['senior', 'junior', 'senior', 'senior', 'junior', 'senior', 'senior'],
    'time_to_maturity': [365, 720, 180, 540, 365, 1080, 450],
    'break_even_spread': [100, 150, 120, 130, 110, 160, 115]
})

# Separate features and target variable
X = df.drop(columns=['break_even_spread'])
y = df['break_even_spread']

# Identify categorical and numerical columns
categorical_features = ['rating', 'industry_level', 'subordination']
numerical_features = ['time_to_maturity']

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(drop='first'), categorical_features)])

# Create SVR model pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', SVR(kernel='rbf', C=1.0, epsilon=0.1))
])

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Check if predictions are within 20% of actual values
result = pd.DataFrame({
    'Actual': y_test,
    'Predicted': y_pred
})
result['Within_20_Percent'] = abs((result['Predicted'] - result['Actual']) / result['Actual']) <= 0.2
result['Result'] = result['Within_20_Percent'].apply(lambda x: 'Good' if x else 'Bad')

# Combine with test features
final_output = X_test.reset_index(drop=True).join(result.reset_index(drop=True))

# Save results to CSV
final_output.to_csv('model_results.csv', index=False)

# Print sample output
print(final_output)