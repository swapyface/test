Part 1
An autoregressive model is a model that can be used to forecast future value using past values.
There is a simple autoregressive model R(t) that is used to calculate stock ranks.

In this model, each company has 2 initial ranks at time 0 and 1: R(0) and R(1), and 3 parameters: a, b, c.

At time t, we can calculate the rank R(t) as following:

    R(t) = a + b * R(t-1) + c / t * R(t-2)^2

For a particular stock VirtualCompany, it has following coefficients:

    R(0) = R(1) = 1.0
    a = 1.0
    b = 0.9
    c = -0.009

For example, to compute its ranks at t=4

    R(2) = 1 + 0.9 * R(1) - 0.009 / 2 * R(0)^2 =

         = 1 + 0.9 * 1    - 0.009 / 2 * 1^2      =

         = 1.8955
    R(3) = 1 + 0.9 * R(2) - 0.009 / 3 * R(1)^2 =

         = 1 + 0.9 * 1.8955 - 0.009 / 3 * 1^2     

         = 2.7030
    R(4) = 1 + 0.9 * R(3) - 0.009 / 4 * R(2)^2 =

         = 1 + 0.9 * 2.7030 - 0.009 / 4 * 1.8955^2 =

         = 3.4246

In this part, we would like to implement this model as the function below, such that given the parameters R(0), R(1), a, b, c and time t, it returns rank at time t R(t)

1

2

def get_rank(r0: float, r1: float, a: float, b: float, c: float, t: int) -> float:

    ...

 

 

 

Part 2
In the real world, we need to perform ranking not just for a single stock, but for thousands of stocks.

Assume we already have the following 2 functions:
get_stocks() -> List[str]
which returns a list of all available stock ids
get_factors(stock: str) -> Tuple[float, float, float, float, float]
which returns the parameters for any stock x:
R0x, R1x, ax, bx, cx = get_factors(x)
In this part, we would like to implement this model as the function below, such that it utilizes get_stocks(), get_factors() and get_rank() and returns a list of ranks of all available stocks at time t

1

2

3

4

from typing import List

 

def get_ranks(t: int) -> List[float]:

    ...

 

 

 


