import pandas as pd
import numpy as np

# Sample DataFrame
df = pd.DataFrame({
    'group': ['A', 'A', 'A', 'B', 'B', 'B', 'B'],
    'coupon': [10, 12, 11, 100, 105, 102, 200]  # Notice drastic change in B
})

# Calculate Z-score within each group
df['z_score'] = df.groupby('group')['coupon'].transform(lambda x: (x - x.mean()) / x.std())

# Flag outliers (e.g., Z-score > 3 or < -3)
df['outlier'] = df['z_score'].abs() > 3

print(df)


def detect_outliers_iqr(df, group_col, value_col):
    def iqr_outliers(group):
        Q1 = group.quantile(0.25)
        Q3 = group.quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        return (group < lower_bound) | (group > upper_bound)
    
    df['outlier'] = df.groupby(group_col)[value_col].transform(iqr_outliers)
    return df

df = detect_outliers_iqr(df, 'group', 'coupon')
print(df)


df['moving_avg'] = df.groupby('group')['coupon'].transform(lambda x: x.rolling(window=3, min_periods=1).mean())
df['pct_change'] = df.groupby('group')['coupon'].transform(lambda x: x.pct_change())

# Flag drastic changes (e.g., greater than 50%)
df['outlier'] = df['pct_change'].abs() > 0.5

print(df)

from sklearn.ensemble import IsolationForest

# Fit Isolation Forest for each group
df['outlier'] = df.groupby('group')['coupon'].transform(lambda x: IsolationForest(contamination=0.05, random_state=42).fit_predict(x.values.reshape(-1, 1)) == -1)

print(df)