# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.neighbors import LocalOutlierFactor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import make_scorer, accuracy_score, f1_score

# Sample data (replace with your dataset)
data = pd.DataFrame({
    'Category': ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C'],
    'Numerical_Variable': [10, 12, 11, 50, 49, 52, 100, 101, 99],  # Numerical data
    'Other_Column': ['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']   # Other columns
})

# Extract numerical data for the model
X = data[['Numerical_Variable']]

# Define the parameter grid for k (n_neighbors)
param_grid = {'n_neighbors': np.arange(1, 30)}

# Create the Local Outlier Factor model
lof = LocalOutlierFactor()

# Setup GridSearchCV to find the best 'k'
grid_search = GridSearchCV(estimator=lof, param_grid=param_grid, 
                           scoring=make_scorer(f1_score, average='macro', zero_division=1),
                           cv=5, n_jobs=-1)

# Perform the grid search
grid_search.fit(X)

# Find the best k value
best_k = grid_search.best_params_['n_neighbors']

# Output the best k value
print(f"The best k value is: {best_k}")