# Mock `qztable` and `sandra` library imports for this example
class qztable:
    class Schema:
        def __init__(self, columns: List[str], types: List[str]):
            self.columns = columns
            self.types = types

    class Table:
        def __init__(self, schema):
            self.schema = schema
            self.data = []

        def append(self, data):
            self.data.extend(data)


class sandra:
    class ConnectionError(Exception):
        pass

    class UploadError(Exception):
        pass

    @staticmethod
    def connect(dbname: str):
        # Mock connection
        return "connection_object"

    @staticmethod
    def update_or_new(container_path: str, data_path: str, col_data):
        # Mock upload logic
        pass


# Utility class to handle DataFrame to qztable conversion
class QZTableConverter:
    """
    Utility class for converting a pandas DataFrame into a qztable object.
    """
    TYPE_MAPPING = {
        "float64": "double",
        "int64": "Int32",
        "datetime64[ns]": "time",
    }

    @staticmethod
    def dataframe_to_qztable(df: pd.DataFrame) -> qztable.Table:
        """
        Converts a pandas DataFrame into a qztable.Table object.
        
        Args:
            df (pd.DataFrame): The input DataFrame.
        
        Returns:
            qztable.Table: The resulting qztable.Table object.
        """
        # Map DataFrame dtypes to qztable types
        types = [QZTableConverter.TYPE_MAPPING.get(str(dtype), "string") for dtype in df.dtypes]
        columns = df.columns.tolist()

        # Create qztable schema and populate table
        schema = qztable.Schema(columns, types)
        qzt = qztable.Table(schema)
        qzt.append(df.values.tolist())
        return qzt


# Class to handle database operations
class SandraUploader:
    """
    Handles operations related to uploading data to Sandra database.
    """
    def __init__(self, dbname: str):
        """
        Initializes the SandraUploader with the database name.

        Args:
            dbname (str): The database name.
        """
        self.dbname = dbname
        self.connection = None

    def connect(self):
        """
        Connects to the Sandra database.
        """
        try:
            self.connection = sandra.connect(self.dbname)
        except sandra.ConnectionError:
            raise Exception("Error: Unable to connect to the database.")

    def upload_result(self, result: pd.DataFrame, start_date: datetime, end_date: datetime) -> str:
        """
        Uploads the DataFrame result to Sandra database.

        Args:
            result (pd.DataFrame): The DataFrame to be uploaded.
            start_date (datetime): The start date of the data.
            end_date (datetime): The end date of the data.

        Returns:
            str: Success message or error details.
        """
        try:
            # Convert DataFrame to qztable
            qz_table = QZTableConverter.dataframe_to_qztable(result)

            # Upload to Sandra
            container_path = f"/Credit/RiskBatch/BreakEvenSpread/result"
            file_name = f"ISOresult_from_{start_date.date()}_to_{end_date.date()}"
            full_path = container_path + "/" + file_name
            sandra.update_or_new(container_path, full_path, qz_table)

            # Save result locally as CSV
            result.to_csv(
                f"C:/Users/zkjrumk/Desktop/ml_project/BreakEvenSpreadOutlierDetection/Datasets/{file_name}.csv", 
                index=False
            )

            return f"Result uploaded to Sandra location: {full_path}"
        except sandra.ConnectionError:
            return "Error: Unable to connect to the database."
        except sandra.UploadError:
            return "Error: File upload failed. Please check the file format or database permissions."
        except Exception as e:
            return f"An unexpected error occurred: {str(e)}"
