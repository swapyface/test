import pandas as pd
import numpy as np

class DataPreprocessor:
    def __init__(self, categorical_cols=None, numerical_cols=None):
        """
        Initialize the DataPreprocessor with specified columns.

        :param categorical_cols: List of categorical column names.
        :param numerical_cols: List of numerical column names.
        """
        self.categorical_cols = categorical_cols or []
        self.numerical_cols = numerical_cols or []

    def preprocess_dates(self, data: pd.DataFrame, date_columns: list) -> pd.DataFrame:
        """
        Convert specified columns to datetime format.

        :param data: Input DataFrame.
        :param date_columns: List of date column names to convert.
        :return: DataFrame with converted date columns.
        """
        for col in date_columns:
            data[col] = pd.to_datetime(data[col], errors='coerce')
        return data

    def calculate_time_to_maturity(self, data: pd.DataFrame, maturity_col: str, reval_col: str, output_col: str) -> pd.DataFrame:
        """
        Calculate the time to maturity in days.

        :param data: Input DataFrame.
        :param maturity_col: Column name for maturity date.
        :param reval_col: Column name for revaluation date.
        :param output_col: Column name to store the result.
        :return: DataFrame with calculated time to maturity.
        """
        data[output_col] = (data[maturity_col] - data[reval_col]).dt.days
        return data

    def flag_outliers(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Flag outliers based on categorical and numerical column rules.

        :param data: Input DataFrame.
        :return: DataFrame with ISO_result and Comment columns indicating outliers.
        """
        data['ISO_result'] = 'Valid'
        data['Comment'] = ''

        # Handle categorical columns
        for col in self.categorical_cols:
            if col in data.columns:
                invalid_values = ['WR', 'NR', 'Undefined', 'Unknown']
                mask = data[col].isin(invalid_values) | data[col].isna()
                data.loc[mask, 'ISO_result'] = 'Exclude'
                data.loc[mask, 'Comment'] += f'{col} contains invalid value. '

        # Handle numerical columns
        for col in self.numerical_cols:
            if col in data.columns:
                mask_high = data[col] > 10000
                mask_low = data[col] < 10
                mask_nan = data[col].isna()
                data.loc[mask_high | mask_low | mask_nan, 'ISO_result'] = 'Exclude'
                data.loc[mask_high, 'Comment'] += f'{col} is too high. '
                data.loc[mask_low, 'Comment'] += f'{col} is too low. '
                data.loc[mask_nan, 'Comment'] += f'{col} is missing. '

        return data

# Example Usage
if __name__ == "__main__":
    # Sample DataFrame
    df = pd.DataFrame({
        'IndustryLevel3': ['A', 'B', 'A', None],
        'Subordination': ['Senior', 'Junior', None, 'Senior'],
        'BreakEvenSpread': [12.5, None, 150.0, 5.5],
        'DerivedRating': ['AAA', 'WR', 'NR', None],
        'MaturityDate': ['2025-01-01', '2023-06-01', None, '2024-12-01'],
        'RevalDate': ['2023-01-01', '2023-01-01', '2023-01-01', None],
        'Product': ['Bond', 'Loan', 'Bond', 'Loan'],
        'RegionofDomicile': ['NA', 'EU', 'APAC', None],
        'Cusip': ['123', '456', '123', '789'],
        'CDCur': ['USD', 'EUR', 'USD', 'JPY']
    })

    # Initialize preprocessor
    preprocessor = DataPreprocessor(
        categorical_cols=['DerivedRating', 'Subordination', 'RegionofDomicile'],
        numerical_cols=['BreakEvenSpread']
    )

    # Preprocess date columns
    df = preprocessor.preprocess_dates(df, ['MaturityDate', 'RevalDate'])

    # Calculate time to maturity
    df = preprocessor.calculate_time_to_maturity(df, 'MaturityDate', 'RevalDate', 'TimeToMaturity')

    # Flag outliers
    df = preprocessor.flag_outliers(df)

    # Display the final DataFrame
    print(df)
