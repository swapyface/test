import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import seaborn as sns

# Example dataset (replace with your actual dataset)
data = pd.DataFrame({
    'price': [500, 520, 550, 1000, 1020, 1500, 2000, 2500, 3000, 3200, 3500, 4000, 4500, 5000, 6000, 7000],
    'rating': ['Low', 'Low', 'Medium', 'Medium', 'High', 'High', 'Low', 'Medium', 'Medium', 'High', 'Low', 'High', 'Low', 'Medium', 'High', 'unknown'],
    'person': ['A', 'B', 'A', 'C', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C', 'D']
})

# Handle missing values
data['price'].fillna(0, inplace=True)  # Fill missing price with 0
data['rating'].fillna('unknown', inplace=True)  # Fill missing rating with 'unknown'

# Apply Isolation Forest for each rating category
outliers_df = pd.DataFrame()  # To store results

for rating in data['rating'].unique():
    subset = data[data['rating'] == rating]
    
    # Apply IsolationForest
    isolation_forest = IsolationForest(contamination=0.1, random_state=42)  # You can adjust contamination level
    subset['anomaly_score'] = isolation_forest.decision_function(subset[['price']])
    subset['is_outlier'] = isolation_forest.predict(subset[['price']])

    # Categorize outlier scores
    subset['outlier_category'] = pd.cut(subset['anomaly_score'], 
                                        bins=[-np.inf, -0.7, -0.5, np.inf], 
                                        labels=['High', 'Medium', 'Low'])
    
    outliers_df = pd.concat([outliers_df, subset])

# Flag WR, NR, and unknown as direct outliers
data['direct_flag'] = np.where(data['rating'].isin(['WR', 'NR', 'unknown']), True, False)

# Merge with outliers detection
final_df = pd.concat([outliers_df, data[['direct_flag']]], axis=1)

# Save result to CSV
final_df.to_csv('isolation_forest_outliers.csv', index=False)

# Visualization (optional)
plt.figure(figsize=(10, 6))
sns.boxplot(y=final_df['price'], showfliers=False)

# Plot outliers
outliers = final_df[final_df['is_outlier'] == -1]
non_outliers = final_df[final_df['is_outlier'] != -1]

# Plot individual points
plt.scatter(np.full(non_outliers.shape[0], 0), non_outliers['price'], color='blue', label='Non-Outlier', edgecolor='black')
plt.scatter(np.full(outliers.shape[0], 0), outliers['price'], color='red', label='Outlier', edgecolor='black')

# Customize plot
plt.legend(loc='upper right')
plt.title('Isolation Forest Outlier Detection with Price Category')
plt.ylabel('Price')
plt.show()