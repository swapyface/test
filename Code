To fine-tune the logistic regression model, we can use GridSearchCV to optimize hyperparameters such as:
	•	C (Inverse of regularization strength)
	•	solver (Optimization algorithm)
	•	class_weight (Handling imbalanced classes)

1. Import Required Libraries

from sklearn.model_selection import GridSearchCV

2. Define Hyperparameter Grid

param_grid = {
    "classifier__C": [0.001, 0.01, 0.1, 1, 10, 100],  # Regularization strength
    "classifier__solver": ["liblinear", "lbfgs"],  # Optimization algorithms
    "classifier__class_weight": [None, "balanced"]  # Handling class imbalance
}

3. Perform Grid Search

# Define the pipeline with preprocessing and logistic regression
model = Pipeline([
    ("preprocessor", preprocessor),
    ("classifier", LogisticRegression(max_iter=1000))
])

# Use GridSearchCV to find the best parameters
grid_search = GridSearchCV(model, param_grid, cv=5, scoring="f1", n_jobs=-1)
grid_search.fit(X_train, y_train)

# Best parameters and best score
print("Best Hyperparameters:", grid_search.best_params_)
print("Best F1-score:", grid_search.best_score_)

4. Evaluate the Best Model

# Get the best model from GridSearch
best_model = grid_search.best_estimator_

# Make predictions
y_pred = best_model.predict(X_test)

# Evaluate performance
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label="outlier")
recall = recall_score(y_test, y_pred, pos_label="outlier")
f1 = f1_score(y_test, y_pred, pos_label="outlier")

print("\nFine-Tuned Model Performance:")
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-score: {f1:.4f}")

# Detailed classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

Next Steps
	•	If the dataset is highly imbalanced, you may try SMOTE or undersampling.
	•	If F1-score is still low, try Polynomial Features or Feature Selection.
	•	If the dataset is large, SGDClassifier (Stochastic Gradient Descent) might work better.

Let me know if you want to explore further!