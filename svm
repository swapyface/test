# Train final model with best parameters
xgb_tuned = XGBRegressor(objective="reg:squarederror", **best_params, random_state=42)
xgb_tuned.fit(X_train, y_train)

# Save the fine-tuned model
joblib.dump(xgb_tuned, "fine_tuned_xgb_model.pkl")
print("\nâœ… Fine-Tuned Model Saved as 'fine_tuned_xgb_model.pkl'")

# Predict using tuned model
y_pred_tuned = xgb_tuned.predict(X_test)

# Evaluate tuned model
tuned_rmse = np.sqrt(mean_squared_error(y_test, y_pred_tuned))
tuned_mae = mean_absolute_error(y_test, y_pred_tuned)
tuned_r2 = r2_score(y_test, y_pred_tuned)

print("\nðŸš€ Fine-Tuned XGBoost Model Performance:")
print(f"RMSE: {tuned_rmse:.4f}")
print(f"MAE: {tuned_mae:.4f}")
print(f"RÂ²: {tuned_r2:.4f}")
âœ… How to Load & Use the Fine-Tuned Model?
python
Copy
Edit
import joblib
import numpy as np

# Load the fine-tuned model and scaler
model = joblib.load("fine_tuned_xgb_model.pkl")
scaler = joblib.load("scaler.pkl")

# New input data (face_value, factor, price)
new_data = np.array([[50000, 1.2, 105]])  # Example input

# Scale the new data
new_data_scaled = scaler.transform(new_data)

# Predict Market Value
predicted_market_value = model.predict(new_data_scaled)
print("Predicted Market Value:", predicted_market_value[0])
