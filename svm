import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Load dataset
df = pd.read_csv("your_dataset.csv")  # Replace with actual dataset path

# Feature selection
X = df[['face_value', 'factor', 'price']]
y = df['market_value']

# Split data into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize models
models = {
    "Linear Regression": LinearRegression(),
    "XGBoost": XGBRegressor(objective="reg:squarederror", random_state=42),
    "SVR": SVR(kernel='rbf')
}

# Train and evaluate each model
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    results[name] = {"RMSE": rmse, "MAE": mae, "R2": r2}
    print(f"Model: {name} | RMSE: {rmse:.4f} | MAE: {mae:.4f} | RÂ²: {r2:.4f}")

# Select best model based on RMSE
best_model_name = min(results, key=lambda k: results[k]["RMSE"])
best_model = models[best_model_name]
print(f"\nBest Model: {best_model_name}")

# Use best model to predict Market Value
df["predicted_market_value"] = best_model.predict(X)

# Flag outliers where prediction doesn't match batch-generated value
threshold = 0.05  # Set deviation threshold (5% difference)
df["is_outlier"] = np.abs(df["predicted_market_value"] - df["market_value"]) > (threshold * df["market_value"])

# Save the results
df.to_csv("market_value_predictions.csv", index=False)

# Plot actual vs predicted values
plt.scatter(df["market_value"], df["predicted_market_value"], c=df["is_outlier"].map({True: "red", False: "blue"}), alpha=0.5)
plt.xlabel("Actual Market Value")
plt.ylabel("Predicted Market Value")
plt.title(f"{best_model_name} - Predicted vs Actual Market Value")
plt.show()
