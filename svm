import pandas as pd
import numpy as np
from sklearn.svm import OneClassSVM
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Load the entire dataset
data = pd.read_csv('your_large_dataset.csv')

# Handle missing values
data['price'].fillna(0, inplace=True)
data['rating'].fillna('unknown', inplace=True)

# Flag specific ratings as outliers
data['Is_outlier'] = data['rating'].isin(['WR', 'NR', 'unknown'])

# Separate flagged data from the rest
flagged_outliers = data[data['Is_outlier']].copy()
remaining_data = data[~data['Is_outlier']].copy()

# Process the remaining data by rating
unique_ratings = remaining_data['rating'].unique()

# Initialize an empty list to hold the processed data
final_results = []

for rating in unique_ratings:
    # Filter data for the current rating
    rating_data = remaining_data[remaining_data['rating'] == rating].copy()

    # Scale numerical columns (price)
    scaler = StandardScaler()
    rating_data['scaled_price'] = scaler.fit_transform(rating_data[['price']])

    # Apply One-Class SVM
    oc_svm = OneClassSVM(kernel='rbf', gamma='scale', nu=0.1)  # Adjust nu as necessary
    rating_data['label'] = oc_svm.fit_predict(rating_data[['scaled_price']])

    # Mark labels as "outlier" or "inlier"
    rating_data['label'] = rating_data['label'].apply(lambda x: 'outlier' if x == -1 else 'inlier')

    # Append the processed data for this rating to the final results
    final_results.append(rating_data)

# Append flagged outliers to final results
final_results.append(flagged_outliers)

# Concatenate all results into a single DataFrame
final_data = pd.concat(final_results, ignore_index=True)

# Save result to CSV
output_file = '/your/desired/path/one_class_svm_outliers.csv'
final_data.to_csv(output_file, index=False)

print("Processing completed and results saved to:", output_file)

# (Optional) Visualization step for the final data
plt.figure(figsize=(10, 6))
sns.boxplot(y=final_data['price'], showfliers=False)

# Plot outliers in red and inliers in blue
outliers = final_data[final_data['label'] == 'outlier']
inliers = final_data[final_data['label'] == 'inlier']

# Plot individual points
plt.scatter(np.full(inliers.shape[0], 0), inliers['price'], color='blue', label='Inlier', edgecolor='black')
plt.scatter(np.full(outliers.shape[0], 0), outliers['price'], color='red', label='Outlier', edgecolor='black')

# Customize plot
plt.legend(loc='upper right')
plt.title('One-Class SVM Outlier Detection with Flagged Ratings')
plt.ylabel('Price')
plt.show()
