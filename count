import pandas as pd
import numpy as np

# Sample dataset
data = {
    'ISO': ['Inliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner'],
    'ZSCORE': ['Inliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner', 'Outliner'],
    'BESP': [100, 180, 100, 100, 1100, 40, 1000, 30],
    'MaturityDt': pd.to_datetime(['2050-01-01', '2024-02-01', '2025-01-01', '2026-01-01', '2075-01-01', '2026-01-01', '2080-01-01', '2024-01-01']),
    'RevalDt': pd.to_datetime(['2023-12-01', '2024-01-20', '2025-01-01', '2025-12-20', '2025-01-01', '2025-01-01', '2025-01-01', '2023-01-01']),
    'Rating': ['AA', 'BB', 'B', 'AAA', 'A', 'CCC', 'AAA', 'CCC']
}
df = pd.DataFrame(data)

# Calculate the difference between MaturityDt and RevalDt
df['DaysToMaturity'] = (df['MaturityDt'] - df['RevalDt']).dt.days

# Define the rules
def determine_obs(row):
    if row['ISO'] == 'Inliner' and row['ZSCORE'] == 'Inliner':
        return 'Consistent Inlier'
    elif row['ISO'] == 'Outliner' and row['ZSCORE'] == 'Outliner':
        return 'Consistent Outlier'
    elif row['ISO'] == 'Outliner' and row['BESP'] == 180:
        return '180 bps is default spread. Model isolates this'
    elif row['ISO'] == 'Outliner' and row['DaysToMaturity'] < 10:
        return 'Close to maturity overstates BE SP. Model internalizes this but it is overstatement'
    elif row['ISO'] == 'Outliner' and row['DaysToMaturity'] > 50 * 365:
        return 'Perpetual bond - overstates BE SP'
    elif row['ISO'] == 'Outliner' and row['Rating'] in {'A', 'AA', 'AAA'} and row['BESP'] > 1000:
        return 'Spread too high for A and better rating'
    elif row['ISO'] == 'Outliner' and row['Rating'] not in {'A', 'AA', 'AAA', 'BBB', 'BB', 'B'} and row['BESP'] < 50:
        return 'Spread too low for CCC and worse rating'
    else:
        return np.nan

# Apply the rules to create the OBS column
df['OBS'] = df.apply(determine_obs, axis=1)

# Print the resulting DataFrame
print(df[['ISO', 'ZSCORE', 'BESP', 'DaysToMaturity', 'Rating', 'OBS']])


df['MaturityDt'] = pd.to_datetime(df['MaturityDt'], format='%Y-%m-%d')
df['RevalDt'] = pd.to_datetime(df['RevalDt'], format='%Y-%m-%d')

